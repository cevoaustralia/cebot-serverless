AWSTemplateFormatVersion: 2010-09-09
Description: |
  A fairly simple chatbot based on awslabs/aws-serverless-chatbot-sample

Parameters:
  TriggerWord:
    Type: String
    Description: The trigger word or name that the bot should respond to
    Default: cebot
  LambdaFunctionMemory:
    Type: Number
    Description: How much memory each Lambda invocation should be assigned
    Default: 128
  LambdaFunctionTimeout:
    Type: Number
    Description: The runtime limit for each Lambda invocation, in seconds
    Default: 3
  CodeS3Bucket:
    Type: String
    Description: The S3 bucket hosting the chatbot code
    Default: grogan-splorgin
  CodeZipfile:
    Type: String
    Description: The path, including prefixes, to the zipfile containing the chatbot code in the S3 bucket
    Default: chatbot.zip
  CodeVersion:
    Type: String
    Description: The S3 versionId of the code in the S3 bucket

Resources:
  ChatBotFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeZipfile
        S3ObjectVersion: !Ref CodeVersion
      Description: Provides a simple chatbot function for Slack
      Handler: bot.lambda_handler
      MemorySize: !Ref LambdaFunctionMemory
      Runtime: python2.7
      Timeout: !Ref LambdaFunctionTimeout
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          CHATBOT_TRIGGER: !Ref TriggerWord

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*

  ApiGatewayInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ChatBotFunction.Arn
      Principal: apigateway.amazonaws.com

  ApiGatewayLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLogRole.Arn

  ChatBotAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Slack Chatbot API
      Name: ChatBotAPI

  ChatBotPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ChatBotAPI
      ResourceId: !GetAtt ChatBotAPI.RootResourceId
      HttpMethod: POST
      MethodResponses:
        - StatusCode: "200"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatBotFunction.Arn}/invocations
        IntegrationResponses:
          - StatusCode: "200"
        RequestTemplates:
          "application/x-www-form-urlencoded": |
            ## convert HTML POST data or HTTP GET query string to JSON
             
            ## get the raw post data from the AWS built-in variable and give it a nicer name
            #if ($context.httpMethod == "POST")
             #set($rawAPIData = $input.path('$'))
            #elseif ($context.httpMethod == "GET")
             #set($rawAPIData = $input.params().querystring)
             #set($rawAPIData = $rawAPIData.toString())
             #set($rawAPIDataLength = $rawAPIData.length() - 1)
             #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))
             #set($rawAPIData = $rawAPIData.replace(", ", "&"))
            #else
             #set($rawAPIData = "")
            #end
             
            ## first we get the number of "&" in the string, this tells us if there is more than one key value pair
            #set($countAmpersands = $rawAPIData.length() - $rawAPIData.replace("&", "").length())
             
            ## if there are no "&" at all then we have only one key value pair.
            ## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.
            ## the "empty" kv pair to the right of the ampersand will be ignored anyway.
            #if ($countAmpersands == 0)
             #set($rawPostData = $rawAPIData + "&")
            #end
             
            ## now we tokenise using the ampersand(s)
            #set($tokenisedAmpersand = $rawAPIData.split("&"))
             
            ## we set up a variable to hold the valid key value pairs
            #set($tokenisedEquals = [])

            ## now we set up a loop to find the valid key value pairs, which must contain only one "="
            #foreach( $kvPair in $tokenisedAmpersand )
             #set($countEquals = $kvPair.length() - $kvPair.replace("=", "").length())
             #if ($countEquals == 1)
              #set($kvTokenised = $kvPair.split("="))
              #if ($kvTokenised[0].length() > 0)
               ## we found a valid key value pair. add it to the list.
               #set($devNull = $tokenisedEquals.add($kvPair))
              #end
             #end
            #end

            ## next we set up our loop inside the output structure "{" and "}"
            {
            #foreach( $kvPair in $tokenisedEquals )
              ## finally we output the JSON for this pair and append a comma if this isn't the last pair
              #set($kvTokenised = $kvPair.split("="))
             "$util.urlDecode($kvTokenised[0])" : #if($kvTokenised[1].length() > 0)"$util.urlDecode($kvTokenised[1])"#{else}""#end#if( $foreach.hasNext ),#end
            #end
            }

  ChatBotProd:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ChatBotDeployment
      Description: production, baby
      RestApiId: !Ref ChatBotAPI
      StageName: production
      MethodSettings:
        - DataTraceEnabled: true
          LoggingLevel: INFO
          HttpMethod: POST
          ResourcePath: /

  ChatBotDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ChatBotPOSTMethod
    Properties:
      Description: Go live
      RestApiId: !Ref ChatBotAPI

Outputs:
  ChatBotURL:
    Description: The value to paste into Slack
    Value: !Sub https://${ChatBotAPI}.execute-api.${AWS::Region}.amazonaws.com/production/
